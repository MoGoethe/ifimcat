{"version":3,"sources":["queries/index.js","conext/Auth.context.js","components/AuthRoute/index.js","routes/index.js","containers/TheContent.js","containers/TheFooter.js","containers/TheHeader.js","containers/_nav.js","containers/TheSidebar.js","containers/TheLayout.js"],"names":["gql","M_LOGIN","Q_CURRENT_USER","M_REGISTER","Q_GETADMINBLOGS","M_UPDATEBLOG","Q_GETBLOGBYKEY","M_CREATEBLOG","Q_GETCATEGORIES","M_UPDATECATEGORY","M_DELETECATEGORY","M_CREATECATEGORY","Q_GETTAGS","M_UPDATETAG","M_DELETETAG","M_CREATETAG","Q_GETTOPICS","M_UPDATETOPIC","M_DELETETOPIC","M_CREATETOPIC","Q_GETUSERS","M_UPDATEUSER","M_UPLOAD","AuthContext","createContext","AuthRoute","props","useContext","currentUser","from","to","Dashboard","React","lazy","Blog","Category","routes","path","exact","name","component","fallbackLoading","className","memo","useQuery","fetchPolicy","onError","err","console","log","history","push","loading","data","Provider","value","fluid","fallback","map","route","idx","key","render","fixed","href","rel","target","TheHeader","dispatch","useDispatch","sidebarShow","useSelector","state","sildeBar","withSubheader","height","alt","inHeader","onClick","val","includes","type","TOGGLE_SLIDEBAR","color","size","_tag","_children","icon","badge","text","show","onShowChange","items","navigation","components","CSidebarNavDivider","CSidebarNavDropdown","CSidebarNavItem","CSidebarNavTitle","TheLayout"],"mappings":"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","file":"static/js/19.db533e8b.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\n// test\nexport const TEST_SERVER = gql `\n  query {\n    hello\n  }\n`;\n\n// user ---------------------------------------------------------------------------\n// 登录\nexport const M_LOGIN = gql `\n  mutation ($email: String!, $password: String!) {\n    login(data: {\n      email: $email,\n      password: $password,\n    }) {\n      id\n      username\n      email\n      roles\n    }\n  }\n`;\n// 获取当前登陆用户信息\nexport const Q_CURRENT_USER = gql `\n  query {\n    currentUser{\n      id\n      username\n      email\n      roles\n    }\n  }\n`;\n// 注册\nexport const M_REGISTER = gql `\n  mutation ($username: String!, $email: String!, $password: String!) {\n    register(data: {\n      email: $email,\n      username: $username,\n      password: $password,\n    }) {\n      id\n      username\n      email\n    }\n  }\n`;\n\n// blogs ---------------------------------------------------------------------------\n// 获取能管理的博客列表\nexport const Q_GETADMINBLOGS = gql `\n  query {\n    getAdminBlogs {\n      id\n      key\n      title\n      description\n      body\n      tags {\n        id\n        key\n        name\n      }\n      topic {\n        id\n        key\n        name\n      }\n      category {\n        id\n        key\n        name\n      }\n      awesome\n      glance\n      is_show\n      author {\n        username\n      }\n      updateAt\n      createAt\n    }\n  }\n`;\n// 保存更改\nexport const M_UPDATEBLOG = gql `\n  mutation($data: UpdateBlogInput!) {\n    updateBlog(data: $data) {\n      id\n      key\n      title\n      description\n      body\n      tags {\n        id\n        key\n        name\n      }\n      topic {\n        id\n        key\n        name\n      }\n      category {\n        id\n        key\n        name\n      }\n      awesome\n      glance\n      is_show\n    }\n  }\n`;\n// 通过key获取博客详情\nexport const Q_GETBLOGBYKEY = gql `\n  query($key: String!) {\n    getBlogByKey(key: $key){\n      id\n      key\n      title\n      description\n      body\n      tags {\n        id\n        key\n        name\n      }\n      topic {\n        id\n        key\n        name\n      }\n      category {\n        id\n        key\n        name\n      }\n      awesome\n      glance\n      is_show\n    }\n  }\n`;\n// 创建新博客\nexport const M_CREATEBLOG = gql`\n  mutation($data: CreateBlogInput!) {\n    createBlog(data: $data) {\n      id\n      key\n      title\n      description\n      body\n      tags {\n        id\n        key\n        name\n      }\n      topic {\n        id\n        key\n        name\n      }\n      category {\n        id\n        key\n        name\n      }\n      awesome\n      glance\n      is_show\n    }\n  }\n`;\n\n// categiries ---------------------------------------------------------------------------\n// 获取分类列表\nexport const Q_GETCATEGORIES = gql`\n  query {\n    getCategories {\n      id\n      key\n      name\n      author {\n        username\n      }\n      blogs {\n        key\n      }\n      createAt\n      updateAt\n    }\n  }\n`;\n// 更新类别\nexport const M_UPDATECATEGORY = gql`\n  mutation($id: Float!, $name: String!) {\n    updateCategory(id: $id, name: $name) {\n      id\n      name\n    }\n  }\n`;\n// 删除类别\nexport const M_DELETECATEGORY = gql`\n  mutation($id: Float!) {\n    deleteCategory(id: $id) {\n      name\n      key\n    }\n  }\n`;\n// 新增类别\nexport const M_CREATECATEGORY = gql `\n  mutation($data: CreateCategoryInput!) {\n    createCategory(data: $data) {\n      name\n    }\n  }\n`;\n\n// tags ---------------------------------------------------------------------------\n// 获取标签列表\nexport const Q_GETTAGS = gql `\n  query {\n    getTags {\n      id\n      key\n      name\n      author {\n        username\n      }\n      blogs {\n        key\n      }\n      createAt\n      updateAt\n    }\n  }\n`;\n// 更新标签\nexport const M_UPDATETAG = gql `\n  mutation($id: Float!, $name: String!) {\n    updateTag(id: $id, name: $name) {\n      id\n      name\n    }\n  }\n`;\n// 删除标签\nexport const M_DELETETAG = gql `\n  mutation($id: Float!){\n    deleteTag(id: $id) {\n      name\n      key\n    }\n  }\n`;\n// 新增标签\nexport const M_CREATETAG = gql `\n  mutation($data: CreateTagInput!) {\n    createTag(data: $data) {\n      name\n    }\n  }\n`;\n\n// topics ---------------------------------------------------------------------------\n// 获取专题列表\nexport const Q_GETTOPICS = gql `\n  query {\n    getTopics {\n      id\n      key\n      name\n      author {\n        username\n      }\n      blogs {\n        key\n      }\n      createAt\n      updateAt\n    }\n  }\n`;\n// 更新专题名称\nexport const M_UPDATETOPIC = gql `\n  mutation($id: Float!, $name: String!) {\n    updateTopic(id: $id, name: $name) {\n      id\n      name\n    }\n  }\n`;\n// 删除专题\nexport const M_DELETETOPIC = gql `\n  mutation($id: Float!){\n    deleteTopic(id: $id) {\n      name\n      key\n    }\n  }\n`;\n// 新增专题\nexport const M_CREATETOPIC = gql `\n  mutation($data: CreateTopicInput!) {\n    createTopic(data: $data) {\n      name\n    }\n  }\n`;\n\n\n// topics ---------------------------------------------------------------------------\n// 获取用户列表\nexport const Q_GETUSERS = gql`\n  query{\n    getUsers{\n      id\n      key\n      email\n      username\n      forbid\n      roles\n      blogs {\n        id\n      }\n      createAt\n    }\n  }\n`;\n// 更新用户\nexport const M_UPDATEUSER = gql`\n  mutation($data: UpdateUserInput!) {\n    updateUser(data: $data) {\n      email\n      username\n      roles\n    }\n  }\n`;\n\n// 图片上传\nexport const M_UPLOAD = gql`\n  mutation($file: Upload!) {\n    fileUpload(file: $file)\n  }\n`;","import { createContext } from 'react';\nexport const AuthContext = createContext({});","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { AuthContext } from '../../conext/Auth.context'\n\nfunction AuthRoute(props) {\n  const ctx = useContext(AuthContext);\n  if (ctx.currentUser) { return (<Route {...props} />) }\n  return (<Redirect from=\"/\" to=\"/login\" />)\n}\n\nexport default AuthRoute;","import React from 'react';\n\nconst Dashboard = React.lazy(() => import('../views/dashboard'));\nconst Blog = React.lazy(() => import('../views/blog'));\nconst Category = React.lazy(() => import('../views/category'));\nconst Tag = React.lazy(() => import('../views/tag'));\nconst Topic = React.lazy(() => import('../views/topic'));\nconst Edit = React.lazy(() => import('../views/edit'));\nconst Admin = React.lazy(() => import('../views/admin'));\n\n\nconst routes = [\n  { path: '/', exact: true, name: 'Home' },\n  { path: '/dashboard', name: 'Dashboard', component: Dashboard },\n  { path: '/blogs', name: 'Blog', component: Blog },\n  { path: '/tags', name: 'Tag', component: Tag},\n  { path: '/categories', name: 'Category', component: Category },\n  { path: '/topics', name: 'Topic', component: Topic },\n  { path: '/editor', name: 'Edit', component: Edit },\n  { path: '/users', name: 'Admin', component: Admin },\n];\n\nexport default routes;\n","import React, { Suspense } from 'react'\nimport {\n  Redirect,\n  Switch\n} from 'react-router-dom'\nimport { CContainer, CFade } from '@coreui/react'\nimport AuthRoute from '../components/AuthRoute'\nimport routes from '../routes'\nimport { useQuery } from '@apollo/react-hooks';\nimport { Q_CURRENT_USER } from '../queries';\nimport { AuthContext } from '../conext/Auth.context';\n\nconst fallbackLoading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n)\n\nconst TheContent = (props) => {\n  const { loading, data } = useQuery(Q_CURRENT_USER, {\n    fetchPolicy: \"network-only\",\n    onError(err) {\n      console.log(err);\n      props.history.push('/500');\n    }\n  });\n\n  if (loading) {\n    return fallbackLoading;\n  }\n  return (\n    <AuthContext.Provider value={{...data}}>\n      <main className=\"c-main\">\n        <CContainer fluid>\n          <Suspense fallback={fallbackLoading}>\n            <Switch>\n              {routes.map((route, idx) => {\n                return route.component && (\n                  <AuthRoute\n                    key={idx}\n                    path={route.path}\n                    exact={route.exact}\n                    name={route.name}\n                    render={props => (\n                      <CFade>\n                        <route.component {...props} />\n                      </CFade>\n                    )}\n                  />\n                )\n              })}\n              <Redirect from=\"/\" to=\"/dashboard\" />\n            </Switch>\n          </Suspense>\n        </CContainer>\n      </main>\n    </AuthContext.Provider>\n  )\n};\n\nexport default React.memo(TheContent);\n","import React from 'react'\nimport { CFooter } from '@coreui/react'\n\nconst TheFooter = () => {\n  return (\n    <CFooter fixed={false}>\n      <div>\n        <a href=\"http://ifimcat.com\" rel=\"noopener noreferrer\">Ifimcat.com</a>\n        <span className=\"ml-1\">&copy; 粤ICP备17044077号</span>\n      </div>\n      <div className=\"mfs-auto\">\n        <span className=\"mr-1\">Powered by</span>\n        <a href=\"https://github.com/MoGoethe\" target=\"_blank\" rel=\"noopener noreferrer\">MoGoethe</a>\n      </div>\n    </CFooter>\n  )\n}\n\nexport default React.memo(TheFooter)\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  CHeader,\n  CToggler,\n  CHeaderBrand,\n  CSubheader,\n  CButton,\n} from '@coreui/react';\nimport CIcon from '@coreui/icons-react';\nimport { TOGGLE_SLIDEBAR } from '../actions';\n\n// routes config\n// import routes from '../routes';\n\nconst TheHeader = (props) => {\n  const dispatch = useDispatch();\n  const { sidebarShow } = useSelector(state => state.sildeBar);\n  const toggleSidebar = () => {\n    const val = [true, 'responsive'].includes(sidebarShow) ? false : 'responsive';\n    dispatch({type: TOGGLE_SLIDEBAR, sidebarShow: val});\n  };\n\n  const toggleSidebarMobile = () => {\n    const val = [false, 'responsive'].includes(sidebarShow) ? true : 'responsive';\n    dispatch({type: TOGGLE_SLIDEBAR, sidebarShow: val});\n  };\n\n  return (\n    <CHeader withSubheader>\n      <CHeaderBrand className=\"mx-auto d-lg-none\" to=\"/\">\n        <CIcon name=\"logo\" height=\"48\" alt=\"Logo\"/>\n      </CHeaderBrand>\n      <CSubheader className=\"px-3 justify-content-between\">\n        <CToggler\n          inHeader\n          className=\"d-lg-none\"\n          onClick={toggleSidebarMobile}\n        />\n        <CToggler\n          inHeader\n          className=\"d-md-down-none\"\n          onClick={toggleSidebar}\n        />\n        <div className=\"d-md-down-none mfe-2 c-subheader-nav\">\n          <CButton color=\"primary\" size=\"sm\" onClick={() => props.history.push('/editor')}>\n            <CIcon name=\"cil-pencil\" />&nbsp;&nbsp;写博客\n          </CButton>\n        </div>\n      </CSubheader>\n    </CHeader>\n  )\n};\n\nexport default TheHeader;\n","export default [\n  {\n    _tag: 'CSidebarNavTitle',\n    _children: ['统计']\n  },\n  {\n    _tag: 'CSidebarNavItem',\n    name: '概览',\n    to: '/dashboard',\n    icon: 'cil-speedometer',\n    badge: {\n      color: 'info',\n      text: 'NEW',\n    }\n  },\n  {\n    _tag: 'CSidebarNavTitle',\n    _children: ['功能']\n  },\n  {\n    _tag: 'CSidebarNavItem',\n    name: '博客',\n    to: '/blogs',\n    icon: 'cil-notes',\n  },\n  {\n    _tag: 'CSidebarNavItem',\n    name: '分类',\n    to: '/categories',\n    icon: 'cil-paperclip',\n  },\n  {\n    _tag: 'CSidebarNavItem',\n    name: '标签',\n    to: '/tags',\n    icon: 'cil-tags',\n  },\n  {\n    _tag: 'CSidebarNavItem',\n    name: '专题',\n    to: '/topics',\n    icon: 'cil-star',\n  },\n  {\n    _tag: 'CSidebarNavItem',\n    name: '用户管理',\n    to: '/users',\n    icon: 'cil-user-follow',\n  },\n  {\n    _tag: 'CSidebarNavItem',\n    name: '写博客',\n    to: '/editor',\n    icon: 'cil-pencil',\n  }\n]\n\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  CCreateElement,\n  CSidebar,\n  CSidebarBrand,\n  CSidebarNav,\n  CSidebarNavDivider,\n  CSidebarNavTitle,\n  CSidebarMinimizer,\n  CSidebarNavDropdown,\n  CSidebarNavItem,\n} from '@coreui/react'\n\n// sidebar nav config\nimport navigation from './_nav'\n\nconst TheSidebar = () => {\n  const dispatch = useDispatch()\n  const show = useSelector(state => state.sildeBar.sidebarShow)\n\n  return (\n    <CSidebar\n      show={show}\n      onShowChange={(val) => dispatch({type: 'set', sidebarShow: val })}\n    >\n      <CSidebarBrand className=\"d-md-down-none\" to=\"/\">\n        <span className=\"c-sidebar-brand-full sidevar-icon\" name=\"logo-negative\" >Ifimcat.com</span>\n        <span className=\"c-sidebar-brand-minimized\" name=\"sygnet\" />\n      </CSidebarBrand>\n      <CSidebarNav>\n\n        <CCreateElement\n          items={navigation}\n          components={{\n            CSidebarNavDivider,\n            CSidebarNavDropdown,\n            CSidebarNavItem,\n            CSidebarNavTitle\n          }}\n        />\n      </CSidebarNav>\n      <CSidebarMinimizer className=\"c-d-md-down-none\"/>\n    </CSidebar>\n  )\n}\n\nexport default React.memo(TheSidebar)\n","import React from 'react'\nimport {\n  TheContent,\n  TheSidebar,\n  TheFooter,\n  TheHeader\n} from './index'\n\nconst TheLayout = (props) => {\n  return (\n    <div className=\"c-app c-default-layout\">\n      <TheSidebar/>\n      <div className=\"c-wrapper\">\n        <TheHeader history={props.history} />\n        <div className=\"c-body\">\n          <TheContent/>\n        </div>\n        <TheFooter/>\n      </div>\n    </div>\n  )\n}\n\nexport default TheLayout\n"],"sourceRoot":""}