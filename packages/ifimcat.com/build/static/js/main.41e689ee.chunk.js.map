{"version":3,"sources":["polyfill.js","App.js","serviceWorker.js","index.js"],"names":["window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","loading","className","Home","lazy","Category","Tag","Topic","Search","Detail","Page404","Page500","App","Suspense","fallback","exact","path","name","render","props","Boolean","location","hostname","match","errorLink","onError","graphQLErrors","networkError","href","console","log","httpLink","createHttpLink","uri","credentials","link","ApolloLink","from","client","ApolloClient","cache","InMemoryCache","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"miEAgCA,WAEE,GAAmC,oBAAvBA,OAAOC,YAA6B,OAAO,EAEvD,SAASA,EAAcC,EAAOC,GAC5BA,EAASA,GAAU,CAAEC,SAAS,EAAOC,YAAY,EAAOC,YAAQC,GAChE,IAAIC,EAAMC,SAASC,YAAa,eAEhC,OADAF,EAAIG,gBAAiBT,EAAOC,EAAOC,QAASD,EAAOE,WAAYF,EAAOG,QAC/DE,EAGTP,EAAYW,UAAYZ,OAAOa,MAAMD,UAErCZ,OAAOC,YAAcA,EAbvB,G,4GC5BMa,G,OACJ,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,kCAKbC,EAAOC,gBAAK,kBAAM,8DAClBC,EAAWD,gBAAK,kBAAM,8DACtBE,EAAMF,gBAAK,kBAAM,8DACjBG,EAAQH,gBAAK,kBAAM,+DACnBI,EAASJ,gBAAK,kBAAM,wDACpBK,EAASL,gBAAK,kBAAM,sEACpBM,EAAUN,gBAAK,kBAAM,wDACrBO,EAAUP,gBAAK,kBAAM,wDAqBZQ,EAnBH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,IAAMC,SAAP,CAAgBC,SAAUb,GACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,iBAAiBC,KAAK,gBAAgBC,OAAQ,SAAAC,GAAK,OAAI,kBAACd,EAAac,MACvF,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,YAAYC,KAAK,WAAWC,OAAQ,SAAAC,GAAK,OAAI,kBAACb,EAAQa,MACxE,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,cAAcC,KAAK,aAAaC,OAAQ,SAAAC,GAAK,OAAI,kBAACZ,EAAUY,MAC9E,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,UAAUC,KAAK,cAAcC,OAAQ,SAAAC,GAAK,OAAI,kBAACX,EAAWW,MAC5E,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,gBAAgBC,KAAK,cAAcC,OAAQ,SAAAC,GAAK,OAAI,kBAACV,EAAWU,MAClF,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,OAAOC,KAAK,WAAWC,OAAQ,SAAAC,GAAK,OAAI,kBAACT,EAAYS,MACvE,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,OAAOC,KAAK,WAAWC,OAAQ,SAAAC,GAAK,OAAI,kBAACR,EAAYQ,MACvE,kBAAC,IAAD,CAAOH,KAAK,IAAIC,KAAK,OAAOC,OAAQ,SAAAC,GAAK,OAAI,kBAAChB,EAASgB,UCtB7CC,QACW,cAA7BjC,OAAOkC,SAASC,UAEa,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCFJ,IAAMC,EAAYC,aAAQ,YAAsC,IAAnCC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aACtCD,IACFvC,OAAOkC,SAASO,KAAO,QAErBD,IACFE,QAAQC,IAAIH,GACZxC,OAAOkC,SAASO,KAAO,WAIrBG,EAAWC,YAAe,CAC9BC,IAAK,eACLC,YAAa,YAETC,EAAOC,IAAWC,KAAK,CAACb,EAAWO,IACnCO,EAAS,IAAIC,IAAa,CAC9BJ,OACAK,MAAO,IAAIC,MAGbC,IAASxB,OACP,kBAAC,IAAD,CAAgBoB,OAAQA,GACtB,kBAAC,EAAD,OAEF1C,SAAS+C,eAAe,SDmFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.41e689ee.chunk.js","sourcesContent":["/*\n* required polyfills\n*/\nimport \"core-js\";\nimport 'core-js/features/set/map';\nimport 'core-js/features/map';\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol'\n// import 'core-js/es6/object'\n// import 'core-js/es6/function'\n// import 'core-js/es6/parse-int'\n// import 'core-js/es6/parse-float'\n// import 'core-js/es6/number'\n// import 'core-js/es6/math'\n// import 'core-js/es6/string'\n// import 'core-js/es6/date'\n// import 'core-js/es6/array'\n// import 'core-js/es6/regexp'\n// import 'core-js/es6/map'\n// import 'core-js/es6/weak-map'\n// import 'core-js/es6/set'\n// import 'core-js/es7/object'\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect'\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\n// import 'core-js/es7/reflect'\n\n// CustomEvent() constructor functionality in IE9, IE10, IE11\n(function () {\n\n  if ( typeof window.CustomEvent === \"function\" ) return false\n\n  function CustomEvent ( event, params ) {\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\n    var evt = document.createEvent( 'CustomEvent' )\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail )\n    return evt\n  }\n\n  CustomEvent.prototype = window.Event.prototype\n\n  window.CustomEvent = CustomEvent\n})()\n","import React, { lazy } from 'react';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\nimport './styles/basic.scss';\n\nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n)\n\n// Containers\nconst Home = lazy(() => import('./views/home'));\nconst Category = lazy(() => import('./views/category'));\nconst Tag = lazy(() => import('./views/tag'));\nconst Topic = lazy(() => import('./views/topic'));\nconst Search = lazy(() => import('./views/search'));\nconst Detail = lazy(() => import('./views/detail'));\nconst Page404 = lazy(() => import('./views/breaks/Page404'));\nconst Page500 = lazy(() => import('./views/breaks/Page500'));\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <React.Suspense fallback={loading}>\n        <Switch>\n          <Route exact path=\"/category/:key\" name=\"Category Page\" render={props => <Category {...props} />} />\n          <Route exact path=\"/tag/:key\" name=\"Tag Page\" render={props => <Tag {...props} />} />\n          <Route exact path=\"/topic/:key\" name=\"Topic Page\" render={props => <Topic {...props} />} />\n          <Route exact path=\"/search\" name=\"Search Page\" render={props => <Search {...props} />} />\n          <Route exact path=\"/article/:key\" name=\"Detail Page\" render={props => <Detail {...props} />} />\n          <Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props} />} />\n          <Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props} />} />\n          <Route path=\"/\" name=\"Home\" render={props => <Home {...props} />} />\n        </Switch>\n      </React.Suspense>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11' // For IE 11 support\nimport 'react-app-polyfill/stable'\nimport './polyfill'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ApolloLink } from 'apollo-link'\nimport { ApolloClient } from 'apollo-client'\nimport { onError } from \"apollo-link-error\"\nimport { createHttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { ApolloProvider } from 'react-apollo'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    window.location.href = '/500';\n  }\n  if (networkError) {\n    console.log(networkError)\n    window.location.href = '/500';\n  }\n});\n\nconst httpLink = createHttpLink({\n  uri: \"/api/graphql\",\n  credentials: 'include',\n});\nconst link = ApolloLink.from([errorLink, httpLink]);\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister();\n"],"sourceRoot":""}